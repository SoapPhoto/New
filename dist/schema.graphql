directive @limit(number: Float) on FIELD_DEFINITION

scalar DateTime

interface BaseNode {
  id: Float!
  createTime: DateTime
  updateTime: DateTime
}

interface BaseList {
  count: Float
  page: Float
  pageSize: Float
  timestamp: Float
}

interface BaseCountData {
  count: Float
}

type Status {
  done: Boolean
}

input PicturesQueryInput {
  """分页"""
  page: Float

  """分页"""
  pageSize: Float

  """时间戳"""
  timestamp: Float
}

input CommentsQueryInput {
  """分页"""
  page: Float

  """分页"""
  pageSize: Float

  """时间戳"""
  timestamp: Float
}

input CollectionsQueryInput {
  """分页"""
  page: Float

  """分页"""
  pageSize: Float

  """时间戳"""
  timestamp: Float
}

enum BadgeType {
  USER
  PICTURE
}

type Query {
  getBadges(type: BadgeType!, targetId: Float!): [Badge]

  """获取收藏夹详情"""
  collection(id: Float!): Collection

  """获取收藏夹图片列表"""
  collectionPictures(
    """收藏夹id"""
    id: Float!
    query: PicturesQueryInput
  ): Pictures
  comments(id: Float!, query: CommentsQueryInput): Comments
  childComments(id: Float!, query: CommentsQueryInput): Comments

  """关注的用户"""
  followedUsers(limit: Float, offset: Float, id: Float): [User]

  """粉丝"""
  followerUsers(limit: Float, offset: Float, id: Float): [User]

  """搜索位置信息"""
  searchPlace(value: String, config: LocationBaseInput): [SearchPlaceDetail]

  """你想地理编码数据"""
  reverseGeocoding(location: String, config: LocationBaseInput): PictureLocation
  userNotification: [Notification]
  unreadNotificationCount: Count

  """获取单个图片"""
  searchPictures(words: String!, query: PicturesQueryInput!): Pictures

  """获取单个图片"""
  picture(id: Float!): Picture

  """获取图片列表"""
  pictures(
    """图片列表类型"""
    type: PicturesType
    query: PicturesQueryInput!
  ): Pictures

  """获取更新图片列表"""
  newPictures(query: NewPicturesQueryInput!): Pictures

  """获取图片相关收藏夹"""
  pictureRelatedCollection(id: Float!): PictureRelatedCollectionReq

  """获取用户的图片"""
  userPictures(
    """用户id"""
    id: Float!

    """用户名"""
    username: String
    query: PicturesQueryInput!
  ): Pictures

  """获取相关图片"""
  pictureRelatedPictures(
    """图片id"""
    id: Float!
    limit: Float
  ): [Picture!]!

  """获取单个用户信息"""
  tag(name: String): Tag
  tagPictures(
    """标签名称"""
    name: String!

    """分页"""
    page: Float

    """分页"""
    pageSize: Float

    """时间戳"""
    timestamp: Float
  ): Pictures

  """获取登录用户信息"""
  whoami: User

  """获取单个用户信息"""
  user(id: ID, username: String): User

  """获取用户的收藏夹列表"""
  userCollectionsByName(username: String!, query: CollectionsQueryInput): Collections

  """获取用户的收藏夹列表"""
  userCollectionsById(id: Float!, query: CollectionsQueryInput!): Collections
  userPicturesByName(
    """类型"""
    type: UserPictureType = MY

    """用户名"""
    username: String!
    query: PicturesQueryInput!
  ): Pictures
  userPicturesById(
    """类型"""
    type: UserPictureType = MY

    """id"""
    id: Float!
    query: PicturesQueryInput
  ): Pictures
}

type Mutation {
  addBadge(type: BadgeType!, badgeId: Float!, targetId: Float!): Status

  """添加图片到收藏夹"""
  addPictureCollection(
    """收藏夹id"""
    id: Float!

    """图片id"""
    pictureId: Float!
  ): Collection

  """从收藏夹删除图片"""
  removePictureCollection(
    """收藏夹id"""
    id: Float!

    """图片id"""
    pictureId: Float!
  ): Status
  deleteCollection(
    """收藏夹id"""
    id: Float!
  ): Status
  addComment(
    """图片id"""
    id: Float!
    commentId: Float
    data: AddCommentInput!
  ): Comment
  followUser(input: FollowUserInput): Status
  unFollowUser(input: FollowUserInput): Status
  markNotificationReadAll: Status

  """喜欢图片"""
  likePicture(id: Float!): LikePictureReq

  """取消喜欢图片"""
  unlikePicture(id: Float!): LikePictureReq
  updatePicture(id: Float!, data: UpdatePictureInput!): Picture
  deletePicture(id: Float!): Status

  """修改用户信息"""
  updateProfile(data: UpdateProfileInput!): User

  """修改封面"""
  updateCover(cover: String!): User
}

type Badge {
  id: Float
  type: BadgeType
  name: String
  rate: String
}

input AddPictureCollectionInput {
  """图片id"""
  pictureId: Float!
}

type Collections implements BaseList {
  count: Float
  page: Float
  pageSize: Float
  timestamp: Float
  data: [Collection!]!
}

type Collection implements BaseNode {
  """id"""
  id: Float!

  """名字"""
  name: String

  """介绍"""
  bio: String

  """图片作者"""
  user: User

  """收藏夹预览"""
  preview: [Picture!]

  """私人"""
  isPrivate: Boolean

  """图片数量"""
  pictureCount: Float

  """创建时间"""
  createTime: DateTime

  """修改时间"""
  updateTime: DateTime
}

input AddCommentInput {
  """评论内容"""
  content: String
}

type Comments implements BaseList {
  count: Float
  page: Float
  pageSize: Float
  timestamp: Float
  data: [Comment!]!
}

type Comment implements BaseNode {
  id: Float!
  content: String

  """评论作者"""
  user: User
  ip: String
  userAgent: String

  """评论的图片"""
  picture: Picture
  createTime: DateTime
  updateTime: DateTime
  replyUser: User
  replyComment: Comment
  parentComment: Comment

  """子评论"""
  childComments(limit: Float): [Comment]

  """子评论数量"""
  subCount: Float
}

input FollowUserInput {
  userId: Float!
}

type Follow {
  """被关注的人"""
  followed: User

  """关注的人"""
  follower: User
  createTime: DateTime
  updateTime: DateTime
}

enum LocationClientType {
  BAIDU
  MAPBOX
}

input LocationBaseInput {
  clientType: LocationClientType
}

type PictureLocation {
  location: SearchPlaceDetailLocation

  """结构化地址信息"""
  formatted_address: String

  """坐标所在商圈信息"""
  business: String

  """国家"""
  country: String

  """国家代码"""
  country_code: String

  """省名"""
  province: String

  """城市名"""
  city: String

  """区县名"""
  district: String

  """乡镇名"""
  town: String
  pois(limit: Float): [Poi]
}

type SearchPlaceDetailInfo {
  tag: String
}

type SearchPlaceDetailLocation {
  lat: Float
  lng: Float
}

type Poi {
  addr: String
  name: String
  poiType: String
  tag: String
}

type SearchPlaceDetail {
  name: String
  location: SearchPlaceDetailLocation
  address: String
  province: String
  city: String
  area: String
  street_id: String
  telephone: String
  detail: Float
  uid: String
  detail_info: SearchPlaceDetailInfo
}

enum NotificationCategory {
  LIKED
  COMMENT
  FOLLOW
  REPLY
}

enum NotificationType {
  USER
  SYSTEM
}

union NotificationMedia = Picture | Comment | Collection | User

type Subscription {
  newNotification: Notification
}

type Count {
  count: Float
}

type Notification implements BaseNode {
  id: Float!

  """创建时间"""
  createTime: DateTime

  """修改时间"""
  updateTime: DateTime

  """消息发布者"""
  publisher: User

  """种类"""
  category: NotificationCategory

  """是否已读"""
  read: Boolean

  """是否已读"""
  media: NotificationMedia
  picture: Picture
  comment: Comment
  user: User
}

enum PicturesType {
  NEW
  HOT
  CHOICE
  FEED
}

input UpdatePictureInput {
  title: String
  bio: String
  isPrivate: Boolean
  tags: [String]
}

input NewPicturesQueryInput {
  """分页"""
  page: Float

  """分页"""
  pageSize: Float

  """时间戳"""
  timestamp: Float

  """起始时间戳"""
  lastTimestamp: Float
}

type PictureRelatedCollectionReq implements BaseCountData {
  count: Float
  data: [Collection!]!
}

type LikePictureReq {
  count: Float
  isLike: Boolean
}

type Pictures implements BaseList {
  count: Float
  page: Float
  pageSize: Float
  timestamp: Float
  data: [Picture!]!
}

type EXIF {
  aperture: Float
  exposureTime: String
  focalLength: Float
  ISO: Float
  location: [Float]
}

"""图片"""
type Picture implements BaseNode {
  """id"""
  id: Float!

  """七牛的key"""
  key: String

  """七牛的hash"""
  hash: String

  """图片标题"""
  title: String

  """图片介绍"""
  bio: String

  """浏览次数"""
  views: Float

  """图片评论数量"""
  commentCount: Float

  """图片原始文件名"""
  originalname: String

  """图片类型"""
  mimetype: String

  """图片大小"""
  size: Float

  """当前登录用户是否喜欢"""
  isLike: Boolean

  """picture喜欢的数量"""
  likedCount: Float

  """图片的主色调"""
  color: String

  """图片的颜色是明还是暗"""
  isDark: Boolean

  """图片长度"""
  height: Float

  """图片宽度"""
  width: Float

  """设备品牌"""
  make: String

  """设备型号"""
  model: String

  """EXIF信息"""
  exif: EXIF

  """blurhash"""
  blurhash: String

  """blurhash src"""
  blurhashSrc: String

  """图片作者"""
  user: User

  """创建时间"""
  createTime: DateTime

  """修改时间"""
  updateTime: DateTime
  tags: [Tag]

  """是否是私人的"""
  isPrivate: Boolean

  """当前用户收藏了此图片的收藏夹列表"""
  currentCollections: [Collection]

  """当前用户收藏了此图片的收藏夹列表"""
  relatedCollections(limit: Float): PictureRelatedCollectionReq

  """徽章"""
  badge: [Badge]

  """位置信息"""
  location: PictureLocation
}

"""标签"""
type Tag implements BaseNode {
  """id"""
  id: Float!

  """标签名称"""
  name: String

  """图片数量"""
  pictureCount: Float
  createTime: DateTime
  updateTime: DateTime
}

enum UserPictureType {
  MY
  LIKED
  CHOICE
}

enum UserSignupType {
  EMAIL
  GITHUB
  GOOGLE
  WEIBO
}

enum UserStatusType {
  UNVERIFIED
  VERIFIED
  SUSPENDED
  BANNED
}

input UpdateProfileInput {
  name: String
  bio: String
  website: String
  key: String
}

"""用户"""
type User implements BaseNode {
  """id"""
  id: Float!

  """用户名"""
  username: String

  """显示的名称"""
  name: String
  fullName: String

  """邮箱"""
  email: String

  """用户头像"""
  avatar(size: Float): String

  """用户封面"""
  cover: String

  """个人介绍"""
  bio: String

  """个人网站"""
  website: String

  """喜欢的picture数量"""
  likedCount: Float

  """用户被喜欢的数量"""
  likesCount: Float

  """用户的picture数量"""
  pictureCount: Float

  """粉丝数量"""
  followerCount: Float

  """关注的人数量"""
  followedCount: Float

  """是否私人"""
  isPrivate: Boolean

  """是否关注"""
  isFollowing: Float

  """是否有设置密码"""
  isPassword: Boolean

  """是否验证邮箱"""
  isEmailVerified: Boolean

  """注册方式"""
  signupType: UserSignupType
  status: UserStatusType
  createTime: DateTime
  updateTime: DateTime
  pictures(limit: Float): [Picture]

  """徽章"""
  badge: [Badge]
}

type UserCoverRes {
  id: Float!
  cover: String!
}
